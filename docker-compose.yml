version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: musicpro-postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-musicpro}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - musicpro-network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: musicpro-backend
    restart: always
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-musicpro}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL:-info@musicpro.com}
    networks:
      - musicpro-network

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: musicpro-frontend
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
    networks:
      - musicpro-network

volumes:
  postgres-data:
    driver: local

networks:
  musicpro-network:
    driver: bridge